# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

template("gcc_toolchain") {
  toolchain(target_name) {
    cc = invoker.cc
    tool("cc") {
      description = "CC {{output}}"

      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    cxx = invoker.cxx
    tool("cxx") {
      description = "CXX {{output}}"

      depfile = "{{output}}.d"
      command = "$cxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
      ]
    }

    if (defined(invoker.objc)) {
      objc = invoker.objc
      tool("objc") {
        description = "OBJC {{output}}"

        depfile = "{{output}}.d"
        command = "$objc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        outputs = [
          "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
        ]
      }
    }

    if (defined(invoker.objc)) {
      objcxx = invoker.objcxx
      tool("objcxx") {
        description = "OBJCXX {{output}}"

        depfile = "{{output}}.d"
        command = "$objcxx -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
        depsformat = "gcc"
        outputs = [
          "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o",
        ]
      }
    }

    ar = invoker.ar
    tool("alink") {
      description = "AR {{output}}"

      command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
      outputs = [
        "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
      ]
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    ld = invoker.ld
    tool("link") {
      outfile = "{{root_out_dir}}/{{target_output_name}}{{output_extension}}"
      description = "LINK $outfile"

      command =
          "$ld {{ldflags}} -o $outfile {{inputs}} {{solibs}} {{libs}} -lpthread"
      outputs = [
        outfile,
      ]
    }

    tool("stamp") {
      command = "touch {{output}}"
      description = "STAMP {{output}}"
    }

    tool("copy_bundle_data") {
      command = "cp -R {{source}} {{output}}"
      description = "COPY_BUNDLE_DATA {{output}}"
    }

    tool("compile_xcassets") {
      command = "./gyp-mac-tool compile-xcassets {{output}}"
      description = "COMPILE_XCASSETS {{output}}"
    }
  }
}
