#!/usr/bin/env python3
# Copyright (C) 2017 The Antares Authors
# This file is part of Antares, a tactical space combat game.
# Antares is free software, distributed under the LGPL+. See COPYING.

from __future__ import division, print_function, unicode_literals

import argparse
import collections
import os
import platform
import shlex
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), "scripts"))
import deps

sys.path.append(os.path.join(os.path.dirname(__file__), "build", "lib", "scripts"))
try:
    import cfg
except ImportError:
    pass

str = type("")  # For Python2


def main():
    os.chdir(os.path.dirname(sys.argv[0]))
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-m",
                        "--mode",
                        metavar="MODE",
                        type=str,
                        choices="dbg dev opt".split(),
                        default="opt",
                        help="set build configuration:\n"
                        "  - opt: compile for fast binaries (default)\n"
                        "  - dev: compile for fast builds\n"
                        "  - dbg: add debugging symbols")
    parser.add_argument("-o",
                        "--target-os",
                        metavar="OS",
                        type=str,
                        help="target os (default: host os)")
    parser.add_argument("--prefix",
                        type=str,
                        default="/usr/local",
                        help="installation prefix (default: /usr/local)")
    parser.add_argument("-v",
                        "--antares-version",
                        metavar="X.X.X",
                        type=str,
                        help="override antares_version string")
    args = parser.parse_args()

    check_submodules()
    check_host()
    check_target(args)

    with cfg.step("configure mode") as msg:
        msg(args.mode, color="green")
    gn_args = {}
    gn_args["mode"] = args.mode
    gn_args["target_os"] = args.target_os
    gn_args["prefix"] = args.prefix
    gn_args["add_cflags"] = shlex.split(os.environ.get("CPPFLAGS", ""))
    gn_args["add_cflags_c"] = shlex.split(os.environ.get("CFLAGS", ""))
    gn_args["add_cflags_cc"] = shlex.split(os.environ.get("CXXFLAGS", ""))
    gn_args["add_ldflags"] = shlex.split(os.environ.get("LDFLAGS", ""))
    if args.antares_version:
        gn_args["antares_version"] = args.antares_version
    if args.target_os == "mac":
        gn_args["macosx_version_min"] = "10.7"
    cfg.gn(**gn_args)

    print("make(1) it so!")


def check_submodules():
    REQUIRED_SUBMODULES = [
        "build/lib/BUILD.gn",
        "ext/glfw/BUILD.gn",
        "ext/gmock/BUILD.gn",
        "ext/libmodplug/BUILD.gn",
        "ext/libpng/BUILD.gn",
        "ext/libsfz/BUILD.gn",
        "ext/libsndfile/BUILD.gn",
        "ext/libzipxx/BUILD.gn",
        "ext/procyon/BUILD.gn",
        "data/README.md",
    ]
    missing = False
    for module in REQUIRED_SUBMODULES:
        if not os.path.exists(os.path.join(module)):
            missing = True
            break

    if missing:
        print("Some submodules are missing. Run:")
        print("")
        print("  $ git submodule update --init build ext data")
        print("")
        print("Then, try ./configure again")
        sys.exit(1)


def check_host():
    with cfg.step("checking host os") as msg:
        if cfg.host_os() in ["mac", "linux"]:
            msg(cfg.host_os(), color="green")
        else:
            msg(cfg.host_os(), color="red")
            print("\nSorry! Antares requires Mac OS X or Linux")
            sys.exit(1)


def check_target(args):
    with cfg.step("checking target os") as msg:
        if args.target_os is None:
            args.target_os = cfg.host_os()
        checker = {
            ("mac", "mac"): check_mac,
            ("linux", "linux"): check_linux_native,
            ("linux", "win"): check_win_on_linux,
        }.get((cfg.host_os(), args.target_os))
        if checker is None:
            msg(args.target_os, color="red")
            sys.exit(1)
        msg(args.target_os, color="green")
    checker(args)


def check_mac(args):
    with cfg.step("checking Mac OS X version") as msg:
        ver = platform.mac_ver()[0]
        ver = tuple(int(x) for x in ver.split(".")[:2])
        if ver < (10, 9):
            msg("%d.%d" % ver, color="red")
            print("\nSorry! Antares requires Mac OS X 10.9+")
            sys.exit(1)
        msg("%d.%d" % ver, color="green")

    missing = collections.OrderedDict()
    if not (cfg.check_clang() and cfg.check_libcxx()):
        missing["xcode"] = ("* To install Xcode, open the App Store:\n"
                            "    https://itunes.apple.com/en/app/xcode/id497799835\n"
                            "  After installing, open it and accept the license agreement\n")
    if not cfg.check_brew():
        missing["brew"] = (
            "* To install Homebrew, run:\n"
            '    $ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"\n'
        )

    missing_pkgs = collections.OrderedDict()
    if not cfg.check_gn():
        missing_pkgs["gn"] = "sfiera/gn/gn"
    if not cfg.check_ninja():
        missing_pkgs["ninja"] = "ninja"
    if missing_pkgs:
        names = " ".join(missing_pkgs)
        pkgs = " ".join(missing_pkgs.values())
        missing[names] = ("* To install packages with Homebrew, run:\n"
                          "    $ brew install %s\n" % pkgs)

    if missing:
        print("\nmissing dependencies: %s\n" % " ".join(missing.keys()))
        for step in missing.values():
            sys.stdout.write(step)
        print("")
        print("Then, try ./configure again")
        sys.exit(1)


def check_linux_native(args):
    with cfg.step("checking Linux distro") as msg:
        pretty, distro, codename = cfg.dist_proto()
        if distro in deps.INSTALL:
            msg(pretty, color="green")
        else:
            msg(pretty + " (untested)", color="yellow")
            distro = "debian"
    if not deps.check(distro=distro, codename=codename):
        sys.exit(1)


def check_win_on_linux(args):
    with cfg.step("checking Linux distro") as msg:
        pretty, distro, codename = cfg.dist_proto()
        if (distro, codename) == ("debian", "focal"):
            msg(pretty, color="green")
        else:
            msg(pretty, color="red")
            print("\nSorry! Cross-compilation currently requires Ubuntu 20.04 focal")
            sys.exit(1)

    missing = collections.OrderedDict()
    if not cfg.check_clang("clang++"):
        missing["clang"] = "clang"

    with cfg.step("checking for mingw") as msg:
        if os.path.exists("/usr/x86_64-w64-mingw32/include/windows.h"):
            msg("ok", color="green")
        else:
            msg("missing", color="red")
            missing["mingw"] = "mingw-w64"

    if missing:
        print("\nmissing dependencies: %s" % " ".join(missing.keys()))
        if len(missing) == 1:
            print("\nYou can install it with:\n")
        else:
            print("\nYou can install them with:\n")
        print("    $ sudo apt-get install %s" % (" ".join(missing.values())))
        sys.exit(1)


if __name__ == "__main__":
    main()
